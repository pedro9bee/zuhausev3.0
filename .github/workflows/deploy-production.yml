name: Deploy to Oracle Cloud Production (Separated Jobs)

on:
  push:
    branches: [production]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/zuhausev3.0/zuhause  # Ajustado para refletir a estrutura zuhausev3.0/zuhause
  REGISTRY_USERNAME: pedro9bee

jobs:
  build-job:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for accurate metadata
      run: |
        echo "✅ Code checked out from repository: https://github.com/pedro9bee/zuhausev3.0"
        ls -la

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      run: |
        echo "🔧 Setting up Docker Buildx environment..."
        docker buildx version

    - name: Log in to GitHub Container Registry with GITHUB_TOKEN
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔐 Logging in to GitHub Container Registry with GITHUB_TOKEN..."
        echo "Using username: ${{ github.actor }}"

    - name: Log in to GHCR with Personal Token
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}
      run: |
        echo "🔐 Logging in to GHCR with personal token for pedro9bee..."
        echo "Registry: ${{ env.REGISTRY }}"

    - name: Extract metadata for Docker image
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=production,enable={{is_default_branch}}
      run: |
        echo "📋 Extracting metadata for Docker image..."
        echo "Generated tags: ${{ steps.meta.outputs.tags }}"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      run: |
        echo "🏗️ Building Docker image with tags: ${{ steps.meta.outputs.tags }}"
        echo "Pushing image to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}..."
        docker images

    - name: Verify image push
      run: |
        echo "✅ Image build and push completed!"
        echo "Image available at: ghcr.io/pedro9bee/zuhausev3.0/zuhause:production"

  deploy-job:
    runs-on: ubuntu-latest
    needs: build-job
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      run: |
        echo "✅ Code checked out for deploy preparation..."

    - name: Deploy to Oracle Cloud Instance
      env:
        SSH_PRIVATE_KEY: ${{ secrets.OCI_SSH_PRIVATE_KEY }}
        SSH_USER: ${{ secrets.OCI_SSH_USER }}
        INSTANCE_IP: ${{ secrets.OCI_INSTANCE_IP }}
        GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      run: |
        echo "🚀 Starting deployment to Oracle Cloud Instance..."
        echo "Target IP: $INSTANCE_IP"
        echo "SSH User: $SSH_USER"

        # Create deployment script
        echo "📝 Creating deployment script..."
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Deployment script started on instance..."
        
        # Log in to GitHub Container Registry
        echo "🔐 Logging in to GHCR on instance..."
        echo "$GHCR_TOKEN" | sudo docker login ghcr.io -u pedro9bee --password-stdin
        
        # Stop and remove existing container
        echo "🛑 Stopping and removing existing container..."
        sudo docker stop zuhause-prod || true
        sudo docker rm zuhause-prod || true
        
        # Pull the latest image
        echo "📥 Pulling image ghcr.io/pedro9bee/zuhausev3.0/zuhause:production..."
        sudo docker pull ghcr.io/pedro9bee/zuhausev3.0/zuhause:production
        
        # Create environment file
        echo "📝 Creating environment file /tmp/.env..."
        cat > /tmp/.env << 'ENVEOF'
        NODE_ENV=production
        AIRTABLE_API_KEY=${AIRTABLE_API_KEY}
        AIRTABLE_BASE_ID=${AIRTABLE_BASE_ID}
        AIRTABLE_TABLE_NAME=${AIRTABLE_TABLE_NAME}
        AIRTABLE_VIEW_ID=${AIRTABLE_VIEW_ID}
        SESSION_SECRET=${SESSION_SECRET}
        ENVEOF
        
        # Run new container
        echo "🚀 Starting new container..."
        sudo docker run -d \
          --name zuhause-prod \
          --restart unless-stopped \
          -p 80:3000 \
          --env-file /tmp/.env \
          ghcr.io/pedro9bee/zuhausev3.0/zuhause:production
        
        # Clean up
        echo "🧹 Cleaning up temporary files..."
        rm /tmp/.env
        
        # Clean up old images
        echo "🧹 Pruning unused images..."
        sudo docker image prune -f
        
        echo "✅ Deployment completed on instance!"
        EOF
        
        # Make script executable
        echo "🔧 Making deploy script executable..."
        chmod +x deploy.sh
        
        # Copy and execute deployment script on Oracle Cloud instance
        echo "📤 Copying deploy script to $INSTANCE_IP..."
        echo "$SSH_PRIVATE_KEY" | ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /dev/stdin "$SSH_USER@$INSTANCE_IP" "cat > /tmp/deploy.sh"
        
        echo "🚀 Executing deploy script on $INSTANCE_IP..."
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i <(echo "$SSH_PRIVATE_KEY") "$SSH_USER@$INSTANCE_IP" "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
      
    - name: Health Check
      env:
        INSTANCE_IP: ${{ secrets.OCI_INSTANCE_IP }}
      run: |
        echo "🔍 Starting health check for application..."
        echo "Target URL: http://$INSTANCE_IP/"
        # Wait for deployment to complete
        echo "⏳ Waiting 30 seconds for container to start..."
        sleep 30
        
        # Check if the application is responding
        for i in {1..12}; do
          echo "🔍 Attempt $i/12: Checking http://$INSTANCE_IP/..."
          if curl -f -s http://$INSTANCE_IP/; then
            echo "✅ Application is healthy and responding at http://$INSTANCE_IP/"
            exit 0
          fi
          echo "⏳ Waiting for application to start... (attempt $i/12)"
          sleep 10
        done
        
        echo "❌ Health check failed - application not responding at http://$INSTANCE_IP/"
        
        # Get container logs for debugging
        echo "📋 Fetching container logs from $INSTANCE_IP..."
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i <(echo "${{ secrets.OCI_SSH_PRIVATE_KEY }}") "${{ secrets.OCI_SSH_USER }}@$INSTANCE_IP" "sudo docker logs zuhause-prod --tail 50"
        
        exit 1
        
    - name: Deployment Summary
      if: always()
      env:
        INSTANCE_IP: ${{ secrets.OCI_INSTANCE_IP }}
      run: |
        echo "📊 Generating deployment summary..."
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Status**: Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Application URL**: http://$INSTANCE_IP" >> $GITHUB_STEP_SUMMARY
          echo "🐳 **Docker Image**: \`ghcr.io/pedro9bee/zuhausev3.0/zuhause:production\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Details**: Check the workflow logs for detailed error information" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
