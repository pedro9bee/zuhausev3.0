name: Deploy to Oracle Cloud Production

on:
  push:
    branches: [production]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/zuhause
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to Oracle Cloud Instance
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.OCI_HOST }}
        username: ${{ secrets.OCI_USERNAME }}
        key: ${{ secrets.OCI_SSH_KEY }}
        script: |
          echo "üöÄ Starting deployment..."
          
          # Log in to GitHub Container Registry
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
          
          # Stop and remove existing container
          echo "üõë Stopping existing container..."
          docker stop zuhause-prod || true
          docker rm zuhause-prod || true
          
          # Pull latest image
          echo "üì• Pulling latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Run new container
          echo "üöÄ Starting new container..."
          docker run -d \
            --name zuhause-prod \
            --restart unless-stopped \
            -p 3000:3000 \
            -e NODE_ENV=production \
            -e AIRTABLE_API_KEY="${{ secrets.AIRTABLE_API_KEY }}" \
            -e AIRTABLE_BASE_ID="${{ secrets.AIRTABLE_BASE_ID }}" \
            -e AIRTABLE_TABLE_NAME="${{ secrets.AIRTABLE_TABLE_NAME }}" \
            -e AIRTABLE_VIEW_ID="${{ secrets.AIRTABLE_VIEW_ID }}" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker image prune -f
          
          echo "‚úÖ Deployment completed!"
          
    - name: Health check
      run: |
        echo "üîç Performing health check..."
        sleep 30
        
        for i in {1..12}; do
          if curl -f -s http://${{ secrets.OCI_HOST }}:3000/; then
            echo "‚úÖ Application is healthy and responding!"
            echo "üåê Application URL: http://${{ secrets.OCI_HOST }}:3000"
            exit 0
          fi
          echo "‚è≥ Waiting for application to start... (attempt $i/12)"
          sleep 10
        done
        
        echo "‚ùå Health check failed - application not responding"
        exit 1
