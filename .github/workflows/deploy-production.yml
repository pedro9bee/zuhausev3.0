name: Deploy to Oracle Cloud Production

on:
  push:
    branches: [production]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/zuhause
  
jobs:
  build-job:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}
        
    - name: Extract metadata for Docker image
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Verify image push
      run: |
        echo "✅ Image build and push completed!"
        echo "Image available at: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

  deploy-job:
    runs-on: ubuntu-latest
    needs: build-job
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Oracle Cloud Instance
      run: |
        echo "🚀 Starting deployment to Oracle Cloud Instance..."
        echo "Target IP: ${{ secrets.OCI_HOST }}"
        echo "SSH User: ${{ secrets.OCI_USERNAME }}"

        # Create SSH key file
        echo "${{ secrets.OCI_SSH_KEY }}" > /tmp/ssh_key
        chmod 600 /tmp/ssh_key

        # Create deployment script
        echo "📝 Creating deployment script..."
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Deployment script started on instance..."
        
        # Log in to GitHub Container Registry
        echo "🔐 Logging in to GHCR on instance..."
        echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
        
        # Stop and remove existing container
        echo "🛑 Stopping and removing existing container..."
        docker stop zuhause-prod || true
        docker rm zuhause-prod || true
        
        # Pull the latest image
        echo "📥 Pulling image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Run new container
        echo "🚀 Starting new container..."
        docker run -d \
          --name zuhause-prod \
          --restart unless-stopped \
          -p 3000:3000 \
          -e NODE_ENV=production \
          -e AIRTABLE_API_KEY="${{ secrets.AIRTABLE_API_KEY }}" \
          -e AIRTABLE_BASE_ID="${{ secrets.AIRTABLE_BASE_ID }}" \
          -e AIRTABLE_TABLE_NAME="${{ secrets.AIRTABLE_TABLE_NAME }}" \
          -e AIRTABLE_VIEW_ID="${{ secrets.AIRTABLE_VIEW_ID }}" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Clean up old images
        echo "🧹 Pruning unused images..."
        docker image prune -f
        
        echo "✅ Deployment completed on instance!"
        EOF
        
        # Make script executable
        chmod +x deploy.sh
        
        # Copy deployment script to Oracle Cloud instance
        echo "📤 Copying deploy script to ${{ secrets.OCI_HOST }}..."
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -i /tmp/ssh_key \
          deploy.sh ${{ secrets.OCI_USERNAME }}@${{ secrets.OCI_HOST }}:/tmp/
        
        # Execute deployment script on Oracle Cloud instance
        echo "🚀 Executing deploy script on ${{ secrets.OCI_HOST }}..."
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -i /tmp/ssh_key \
          ${{ secrets.OCI_USERNAME }}@${{ secrets.OCI_HOST }} \
          "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
        
        # Clean up SSH key
        rm -f /tmp/ssh_key
      
    - name: Health Check
      run: |
        echo "🔍 Starting health check for application..."
        echo "Target URL: http://${{ secrets.OCI_HOST }}:3000/"
        
        # Wait for deployment to complete
        echo "⏳ Waiting 30 seconds for container to start..."
        sleep 30
        
        # Check if the application is responding
        for i in {1..12}; do
          echo "🔍 Attempt $i/12: Checking http://${{ secrets.OCI_HOST }}:3000/..."
          if curl -f -s http://${{ secrets.OCI_HOST }}:3000/; then
            echo "✅ Application is healthy and responding at http://${{ secrets.OCI_HOST }}:3000/"
            exit 0
          fi
          echo "⏳ Waiting for application to start... (attempt $i/12)"
          sleep 10
        done
        
        echo "❌ Health check failed - application not responding at http://${{ secrets.OCI_HOST }}:3000/"
        exit 1
        
    - name: Deployment Summary
      if: always()
      run: |
        echo "📊 Generating deployment summary..."
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Status**: Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Application URL**: http://${{ secrets.OCI_HOST }}:3000" >> $GITHUB_STEP_SUMMARY
          echo "🐳 **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Details**: Check the workflow logs for detailed error information" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY