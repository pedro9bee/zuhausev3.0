name: Deploy to Oracle Cloud Production

on:
  push:
    branches: [production]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/zuhausev3.0/zuhause
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to Oracle Cloud Instance
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.OCI_HOST }}
        username: ${{ secrets.OCI_USERNAME }}
        key: ${{ secrets.OCI_SSH_KEY }}
        script: |
          echo "🚀 Starting deployment..."
          
          # Log in to GitHub Container Registry
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
          
          # Stop and remove existing container
          echo "🛑 Stopping existing container..."
          docker stop zuhause-prod || true
          docker rm zuhause-prod || true
          
          # Kill any process using port 80 or 8080 (cleanup)
          echo "🧹 Cleaning up ports..."
          sudo fuser -k 80/tcp || true
          sudo fuser -k 8080/tcp || true
          
          # Pull latest image
          echo "📥 Pulling latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Create docker-compose.yml
          echo "📝 Creating docker-compose.yml..."
          cat > docker-compose.yml << 'EOF'
          services:
            zuhause-prod:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              container_name: zuhause-prod
              restart: unless-stopped
              ports:
                - "80:3000"
              environment:
                - NODE_ENV=production
                - AIRTABLE_API_KEY=${{ secrets.AIRTABLE_API_KEY }}
                - AIRTABLE_BASE_ID=${{ secrets.AIRTABLE_BASE_ID }}
                - AIRTABLE_TABLE_NAME=${{ secrets.AIRTABLE_TABLE_NAME }}
                - AIRTABLE_VIEW_ID=${{ secrets.AIRTABLE_VIEW_ID }}
                - SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          EOF
          
          # Start container using docker-compose
          echo "🚀 Starting new container on port 80..."
          docker-compose up -d
          
          # Wait for container to start
          echo "⏳ Waiting for container to start..."
          sleep 10
          
          # Check container status
          docker-compose ps
          
          # Clean up old images
          echo "🧹 Cleaning up old images..."
          docker image prune -f
          
          echo "✅ Deployment completed!"
          
    - name: Health check
      run: |
        echo "🔍 Performing health check..."
        sleep 20
        
        # Check if the application is responding on port 80 (without port in URL)
        for i in {1..10}; do
          if curl -f -s http://${{ secrets.OCI_HOST }}/; then
            echo "✅ Application is healthy and responding!"
            echo "🌐 Application URL: http://${{ secrets.OCI_HOST }}"
            echo "🌐 Custom Domain: http://zuhause.labz.my"
            exit 0
          fi
          echo "⏳ Waiting for application to start... (attempt $i/10)"
          sleep 15
        done
        
        echo "❌ Health check failed - application not responding"
        exit 1
        
    - name: Deployment summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Status**: Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Application URLs**:" >> $GITHUB_STEP_SUMMARY
          echo "  - **Primary**: http://${{ secrets.OCI_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "  - **Custom Domain**: http://zuhause.labz.my" >> $GITHUB_STEP_SUMMARY
          echo "  - **Backup**: http://${{ secrets.OCI_HOST }}:8080" >> $GITHUB_STEP_SUMMARY
          echo "🐳 **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Ports**: 80 (primary), 8080 (backup)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Details**: Check the workflow logs for detailed error information" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY