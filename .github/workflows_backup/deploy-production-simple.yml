name: Deploy to Oracle Cloud Production (Simple)

on:
  push:
    branches: [production]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/zuhause
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to Oracle Cloud Instance
      run: |
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting deployment..."
        
        # Log in to GitHub Container Registry
        echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
        # Stop and remove existing container
        echo "🛑 Stopping existing container..."
        sudo docker stop zuhause-prod || true
        sudo docker rm zuhause-prod || true
        
        # Pull latest image
        echo "📥 Pulling latest image..."
        sudo docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production
        
        # Create environment file
        echo "📝 Creating environment file..."
        cat > /tmp/.env << 'ENVEOF'
        NODE_ENV=production
        AIRTABLE_API_KEY=${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID=${{ secrets.AIRTABLE_BASE_ID }}
        AIRTABLE_TABLE_NAME=${{ secrets.AIRTABLE_TABLE_NAME }}
        AIRTABLE_VIEW_ID=${{ secrets.AIRTABLE_VIEW_ID }}
        SESSION_SECRET=${{ secrets.SESSION_SECRET }}
        ENVEOF
        
        # Run new container
        echo "🚀 Starting new container..."
        sudo docker run -d \
          --name zuhause-prod \
          --restart unless-stopped \
          -p 80:3000 \
          --env-file /tmp/.env \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production
        
        # Clean up
        rm /tmp/.env
        
        # Clean up old images
        echo "🧹 Cleaning up old images..."
        sudo docker image prune -f
        
        echo "✅ Deployment completed!"
        EOF
        
        # Make script executable
        chmod +x deploy.sh
        
        # Copy and execute deployment script on Oracle Cloud instance
        echo "📋 Copying deployment script to instance..."
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -i <(echo "${{ secrets.OCI_SSH_PRIVATE_KEY }}") \
          deploy.sh ${{ secrets.OCI_SSH_USER }}@${{ secrets.OCI_INSTANCE_IP }}:/tmp/
        
        echo "🚀 Executing deployment on instance..."
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -i <(echo "${{ secrets.OCI_SSH_PRIVATE_KEY }}") \
          ${{ secrets.OCI_SSH_USER }}@${{ secrets.OCI_INSTANCE_IP }} \
          "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
          
    - name: Health check
      run: |
        echo "🔍 Performing health check..."
        # Wait for deployment to complete
        sleep 30
        
        # Check if the application is responding
        for i in {1..12}; do
          if curl -f -s http://${{ secrets.OCI_INSTANCE_IP }}/; then
            echo "✅ Application is healthy and responding!"
            echo "🌐 Application URL: http://${{ secrets.OCI_INSTANCE_IP }}"
            exit 0
          fi
          echo "⏳ Waiting for application to start... (attempt $i/12)"
          sleep 10
        done
        
        echo "❌ Health check failed - application not responding"
        
        # Get container logs for debugging
        echo "📋 Container logs:"
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -i <(echo "${{ secrets.OCI_SSH_PRIVATE_KEY }}") \
          ${{ secrets.OCI_SSH_USER }}@${{ secrets.OCI_INSTANCE_IP }} \
          "sudo docker logs zuhause-prod --tail 50"
        
        exit 1
        
    - name: Deployment summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Status**: Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Application URL**: http://${{ secrets.OCI_INSTANCE_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "🐳 **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          echo "📋 Check the workflow logs for detailed error information" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY